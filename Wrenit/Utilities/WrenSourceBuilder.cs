using System;
using System.Collections.Generic;
using System.Data.SqlClient;
using System.Globalization;
using System.Text;

namespace Wrenit.Utilities
{
	public class WrenSourceBuilder
	{
		private readonly StringBuilder _sb;
		private int _indents;

		public WrenSourceBuilder()
		{
			_sb = new StringBuilder();
			_sb.Append("//auto generated by wrenit \n\n");
		}

		public override string ToString()
		{
			return _sb.ToString();
		}

		public void AppendImports(List<WrenImportAttribute> importAttributes)
		{
			if (importAttributes.Count == 0) return;
			var usedAttributes = new List<WrenImportAttribute>();

			_sb.Append("\n");
			for (int i = 0; i < importAttributes.Count; i++)
			{
				WrenImportAttribute itAttribute = importAttributes[i];
				if (usedAttributes.Contains(itAttribute)) continue;

				string module = itAttribute.Module ?? WrenBuilder.GetResolvedName(itAttribute.ModuleType);
				if (string.IsNullOrEmpty(module))
				{
					if (itAttribute.ModuleType != null) throw new NullReferenceException($"Could not find build class of type {itAttribute.ModuleType}");
					throw new ArgumentNullException($"Can't import module without a name");
				}
				_sb.Append($"import \"{module}\"");

				var attributesOfGroup = importAttributes.FindAll(searchAttribute =>
				{
					if (usedAttributes.Contains(searchAttribute)) return false;
					return searchAttribute.Module == itAttribute.Module;
				});
				usedAttributes.AddRange(attributesOfGroup);

				bool firstFor = true;
				for (int j = 0; j < attributesOfGroup.Count; j++)
				{
					WrenImportAttribute importAttribute = attributesOfGroup[j];
					string @for = importAttribute.For ?? WrenBuilder.GetResolvedName(importAttribute.ForType);
					if (string.IsNullOrEmpty(@for)) continue;

					if (firstFor)
					{
						_sb.Append(" for ");
						firstFor = false;
					}

					_sb.Append(@for);

					if (string.IsNullOrEmpty(importAttribute.As) == false)
					{
						_sb.Append(" as ");
						_sb.Append(importAttribute.As);
					}
					if (j + 1 < attributesOfGroup.Count) _sb.Append(", ");
					
				}
				_sb.Append("\n\n");
			}
		}
		
		private void AppendIndents()
		{
			for (int i = 0; i < _indents; i++)
			{
				_sb.Append("\t");
			}
		}
		
		public void AppendAttributes(List<WrenAttributeAttribute> attributes)
		{
			if (attributes.Count == 0) return;
			var usedAttributes = new List<WrenAttributeAttribute>();

			_sb.Append("\n");
			for (int i = 0; i < attributes.Count; i++)
			{
				WrenAttributeAttribute itAttribute = attributes[i];
				if (usedAttributes.Contains(itAttribute)) continue;

				AppendIndents();
				_sb.Append("#");
				if (itAttribute.RuntimeAccess) _sb.Append("!");
				if (string.IsNullOrEmpty(itAttribute.Group) == false)
				{
					_sb.Append(itAttribute.Group);
					_sb.Append("(\n");
					_indents++;

					List<WrenAttributeAttribute> attributesOfGroup = attributes.FindAll(searchAttribute =>
					{
						if (usedAttributes.Contains(searchAttribute)) return false;
						if (string.IsNullOrEmpty(searchAttribute.Group)) return false;
						if (searchAttribute.RuntimeAccess != itAttribute.RuntimeAccess) return false;

						return searchAttribute.Group == itAttribute.Group;
					});

					usedAttributes.AddRange(attributesOfGroup);

					for (int j = 0; j < attributesOfGroup.Count; j++)
					{
						AppendIndents();
						AppendAttribute(attributesOfGroup[j]);
						if (j + 1 < attributesOfGroup.Count) _sb.Append(",");
						_sb.Append("\n");
					}

					AppendIndents();
					_sb.Append(")\n");
					_indents++;
				}
				else
				{
					AppendAttribute(itAttribute);
					_sb.Append("\n");
				}
			}
		}
		
		private void AppendAttribute(WrenAttributeAttribute attribute)
		{
			_sb.Append(attribute.Key);
			if (attribute.Value == null) return;

			_sb.Append(" = ");
			switch (attribute.Value)
			{
				case double d:
					_sb.Append(d.ToString(CultureInfo.InvariantCulture));
					return;

				case bool b:
					_sb.Append(b ? "true" : "false");
					return;

				case string s:
					_sb.Append($"\"{s}\"");
					return;
			}
		}

		public void OpenClass(bool isForeign, string className, string inherit)
		{
			if (isForeign) _sb.Append("foreign ");
			_sb.Append($"class {className}");
			
			if (string.IsNullOrEmpty(inherit) == false)
			{
				_sb.Append($"	is {inherit} ");
			}
			
			_sb.Append("{\n");
			_indents++;
		}
		
		public void CloseClass()
		{
			_sb.Append("}\n");
			_indents--;
		}

		public void AddMethod(WrenMethodType type, string name, int argumentCount)
		{
			AppendIndents();
			_sb.Append(WrenSignature.CreateSignature(type, name, argumentCount,
				SignatureStyle.ForeignImplementation));
			_sb.Append("\n");
		}

		public void AddRaw(string raw)
		{
			_sb.Append($"\n// begin manual source\n");
			_sb.Append(raw);
			_sb.Append("\n// end manual source\n\n");
		}
	}
}
